{"version":3,"file":"./build/keyboard-shortcuts/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"data\"]","../../packages/keyboard-shortcuts/src/store/actions.js","webpack://wp/external window [\"wp\",\"keycodes\"]","../../packages/keyboard-shortcuts/src/store/selectors.js","../../packages/keyboard-shortcuts/src/store/index.js","../../packages/keyboard-shortcuts/src/store/reducer.js","webpack://wp/external window [\"wp\",\"element\"]","../../packages/keyboard-shortcuts/src/hooks/use-shortcut-event-match.js","../../packages/keyboard-shortcuts/src/context.js","../../packages/keyboard-shortcuts/src/hooks/use-shortcut.js","webpack://wp/external window \"ReactJSXRuntime\"","../../packages/keyboard-shortcuts/src/components/shortcut-provider.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","/** @typedef {import('@wordpress/keycodes').WPKeycodeModifier} WPKeycodeModifier */\n\n/**\n * Keyboard key combination.\n *\n * @typedef {Object} WPShortcutKeyCombination\n *\n * @property {string}                      character Character.\n * @property {WPKeycodeModifier|undefined} modifier  Modifier.\n */\n\n/**\n * Configuration of a registered keyboard shortcut.\n *\n * @typedef {Object} WPShortcutConfig\n *\n * @property {string}                     name           Shortcut name.\n * @property {string}                     category       Shortcut category.\n * @property {string}                     description    Shortcut description.\n * @property {WPShortcutKeyCombination}   keyCombination Shortcut key combination.\n * @property {WPShortcutKeyCombination[]} [aliases]      Shortcut aliases.\n */\n\n/**\n * Returns an action object used to register a new keyboard shortcut.\n *\n * @param {WPShortcutConfig} config Shortcut config.\n *\n * @example\n *\n *```js\n * import { useEffect } from 'react';\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect, useDispatch } from '@wordpress/data';\n * import { __ } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const { registerShortcut } = useDispatch( keyboardShortcutsStore );\n *\n *     useEffect( () => {\n *         registerShortcut( {\n *             name: 'custom/my-custom-shortcut',\n *             category: 'my-category',\n *             description: __( 'My custom shortcut' ),\n *             keyCombination: {\n *                 modifier: 'primary',\n *                 character: 'j',\n *             },\n *         } );\n *     }, [] );\n *\n *     const shortcut = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutKeyCombination(\n *                 'custom/my-custom-shortcut'\n *             ),\n *         []\n *     );\n *\n *     return shortcut ? (\n *         <p>{ __( 'Shortcut is registered.' ) }</p>\n *     ) : (\n *         <p>{ __( 'Shortcut is not registered.' ) }</p>\n *     );\n * };\n *```\n * @return {Object} action.\n */\nexport function registerShortcut( {\n\tname,\n\tcategory,\n\tdescription,\n\tkeyCombination,\n\taliases,\n} ) {\n\treturn {\n\t\ttype: 'REGISTER_SHORTCUT',\n\t\tname,\n\t\tcategory,\n\t\tkeyCombination,\n\t\taliases,\n\t\tdescription,\n\t};\n}\n\n/**\n * Returns an action object used to unregister a keyboard shortcut.\n *\n * @param {string} name Shortcut name.\n *\n * @example\n *\n *```js\n * import { useEffect } from 'react';\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect, useDispatch } from '@wordpress/data';\n * import { __ } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const { unregisterShortcut } = useDispatch( keyboardShortcutsStore );\n *\n *     useEffect( () => {\n *         unregisterShortcut( 'core/editor/next-region' );\n *     }, [] );\n *\n *     const shortcut = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutKeyCombination(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return shortcut ? (\n *         <p>{ __( 'Shortcut is not unregistered.' ) }</p>\n *     ) : (\n *         <p>{ __( 'Shortcut is unregistered.' ) }</p>\n *     );\n * };\n *```\n * @return {Object} action.\n */\nexport function unregisterShortcut( name ) {\n\treturn {\n\t\ttype: 'UNREGISTER_SHORTCUT',\n\t\tname,\n\t};\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"keycodes\"];","/**\n * WordPress dependencies\n */\nimport { createSelector } from '@wordpress/data';\nimport {\n\tdisplayShortcut,\n\tshortcutAriaLabel,\n\trawShortcut,\n} from '@wordpress/keycodes';\n\n/** @typedef {import('./actions').WPShortcutKeyCombination} WPShortcutKeyCombination */\n\n/** @typedef {import('@wordpress/keycodes').WPKeycodeHandlerByModifier} WPKeycodeHandlerByModifier */\n\n/**\n * Shared reference to an empty array for cases where it is important to avoid\n * returning a new array reference on every invocation.\n *\n * @type {Array<any>}\n */\nconst EMPTY_ARRAY = [];\n\n/**\n * Shortcut formatting methods.\n *\n * @property {WPKeycodeHandlerByModifier} display     Display formatting.\n * @property {WPKeycodeHandlerByModifier} rawShortcut Raw shortcut formatting.\n * @property {WPKeycodeHandlerByModifier} ariaLabel   ARIA label formatting.\n */\nconst FORMATTING_METHODS = {\n\tdisplay: displayShortcut,\n\traw: rawShortcut,\n\tariaLabel: shortcutAriaLabel,\n};\n\n/**\n * Returns a string representing the key combination.\n *\n * @param {?WPShortcutKeyCombination} shortcut       Key combination.\n * @param {keyof FORMATTING_METHODS}  representation Type of representation\n *                                                   (display, raw, ariaLabel).\n *\n * @return {?string} Shortcut representation.\n */\nfunction getKeyCombinationRepresentation( shortcut, representation ) {\n\tif ( ! shortcut ) {\n\t\treturn null;\n\t}\n\n\treturn shortcut.modifier\n\t\t? FORMATTING_METHODS[ representation ][ shortcut.modifier ](\n\t\t\t\tshortcut.character\n\t\t  )\n\t\t: shortcut.character;\n}\n\n/**\n * Returns the main key combination for a given shortcut name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n *\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { createInterpolateElement } from '@wordpress/element';\n * import { sprintf } from '@wordpress/i18n';\n * const ExampleComponent = () => {\n *     const {character, modifier} = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutKeyCombination(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         <div>\n *             { createInterpolateElement(\n *                 sprintf(\n *                     'Character: <code>%s</code> / Modifier: <code>%s</code>',\n *                     character,\n *                     modifier\n *                 ),\n *                 {\n *                     code: <code />,\n *                 }\n *             ) }\n *         </div>\n *     );\n * };\n *```\n *\n * @return {WPShortcutKeyCombination?} Key combination.\n */\nexport function getShortcutKeyCombination( state, name ) {\n\treturn state[ name ] ? state[ name ].keyCombination : null;\n}\n\n/**\n * Returns a string representing the main key combination for a given shortcut name.\n *\n * @param {Object}                   state          Global state.\n * @param {string}                   name           Shortcut name.\n * @param {keyof FORMATTING_METHODS} representation Type of representation\n *                                                  (display, raw, ariaLabel).\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { sprintf } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const {display, raw, ariaLabel} = useSelect(\n *         ( select ) =>{\n *             return {\n *                 display: select( keyboardShortcutsStore ).getShortcutRepresentation('core/editor/next-region' ),\n *                 raw: select( keyboardShortcutsStore ).getShortcutRepresentation('core/editor/next-region','raw' ),\n *                 ariaLabel: select( keyboardShortcutsStore ).getShortcutRepresentation('core/editor/next-region', 'ariaLabel')\n *             }\n *         },\n *         []\n *     );\n *\n *     return (\n *         <ul>\n *             <li>{ sprintf( 'display string: %s', display ) }</li>\n *             <li>{ sprintf( 'raw string: %s', raw ) }</li>\n *             <li>{ sprintf( 'ariaLabel string: %s', ariaLabel ) }</li>\n *         </ul>\n *     );\n * };\n *```\n *\n * @return {?string} Shortcut representation.\n */\nexport function getShortcutRepresentation(\n\tstate,\n\tname,\n\trepresentation = 'display'\n) {\n\tconst shortcut = getShortcutKeyCombination( state, name );\n\treturn getKeyCombinationRepresentation( shortcut, representation );\n}\n\n/**\n * Returns the shortcut description given its name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n *\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { __ } from '@wordpress/i18n';\n * const ExampleComponent = () => {\n *     const shortcutDescription = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutDescription( 'core/editor/next-region' ),\n *         []\n *     );\n *\n *     return shortcutDescription ? (\n *         <div>{ shortcutDescription }</div>\n *     ) : (\n *         <div>{ __( 'No description.' ) }</div>\n *     );\n * };\n *```\n * @return {?string} Shortcut description.\n */\nexport function getShortcutDescription( state, name ) {\n\treturn state[ name ] ? state[ name ].description : null;\n}\n\n/**\n * Returns the aliases for a given shortcut name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { createInterpolateElement } from '@wordpress/element';\n * import { sprintf } from '@wordpress/i18n';\n * const ExampleComponent = () => {\n *     const shortcutAliases = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getShortcutAliases(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         shortcutAliases.length > 0 && (\n *             <ul>\n *                 { shortcutAliases.map( ( { character, modifier }, index ) => (\n *                     <li key={ index }>\n *                         { createInterpolateElement(\n *                             sprintf(\n *                                 'Character: <code>%s</code> / Modifier: <code>%s</code>',\n *                                 character,\n *                                 modifier\n *                             ),\n *                             {\n *                                 code: <code />,\n *                             }\n *                         ) }\n *                     </li>\n *                 ) ) }\n *             </ul>\n *         )\n *     );\n * };\n *```\n *\n * @return {WPShortcutKeyCombination[]} Key combinations.\n */\nexport function getShortcutAliases( state, name ) {\n\treturn state[ name ] && state[ name ].aliases\n\t\t? state[ name ].aliases\n\t\t: EMPTY_ARRAY;\n}\n\n/**\n * Returns the shortcuts that include aliases for a given shortcut name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { createInterpolateElement } from '@wordpress/element';\n * import { sprintf } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const allShortcutKeyCombinations = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getAllShortcutKeyCombinations(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         allShortcutKeyCombinations.length > 0 && (\n *             <ul>\n *                 { allShortcutKeyCombinations.map(\n *                     ( { character, modifier }, index ) => (\n *                         <li key={ index }>\n *                             { createInterpolateElement(\n *                                 sprintf(\n *                                     'Character: <code>%s</code> / Modifier: <code>%s</code>',\n *                                     character,\n *                                     modifier\n *                                 ),\n *                                 {\n *                                     code: <code />,\n *                                 }\n *                             ) }\n *                         </li>\n *                     )\n *                 ) }\n *             </ul>\n *         )\n *     );\n * };\n *```\n *\n * @return {WPShortcutKeyCombination[]} Key combinations.\n */\nexport const getAllShortcutKeyCombinations = createSelector(\n\t( state, name ) => {\n\t\treturn [\n\t\t\tgetShortcutKeyCombination( state, name ),\n\t\t\t...getShortcutAliases( state, name ),\n\t\t].filter( Boolean );\n\t},\n\t( state, name ) => [ state[ name ] ]\n);\n\n/**\n * Returns the raw representation of all the keyboard combinations of a given shortcut name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Shortcut name.\n *\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n * import { createInterpolateElement } from '@wordpress/element';\n * import { sprintf } from '@wordpress/i18n';\n *\n * const ExampleComponent = () => {\n *     const allShortcutRawKeyCombinations = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getAllShortcutRawKeyCombinations(\n *                 'core/editor/next-region'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         allShortcutRawKeyCombinations.length > 0 && (\n *             <ul>\n *                 { allShortcutRawKeyCombinations.map(\n *                     ( shortcutRawKeyCombination, index ) => (\n *                         <li key={ index }>\n *                             { createInterpolateElement(\n *                                 sprintf(\n *                                     ' <code>%s</code>',\n *                                     shortcutRawKeyCombination\n *                                 ),\n *                                 {\n *                                     code: <code />,\n *                                 }\n *                             ) }\n *                         </li>\n *                     )\n *                 ) }\n *             </ul>\n *         )\n *     );\n * };\n *```\n *\n * @return {string[]} Shortcuts.\n */\nexport const getAllShortcutRawKeyCombinations = createSelector(\n\t( state, name ) => {\n\t\treturn getAllShortcutKeyCombinations( state, name ).map(\n\t\t\t( combination ) =>\n\t\t\t\tgetKeyCombinationRepresentation( combination, 'raw' )\n\t\t);\n\t},\n\t( state, name ) => [ state[ name ] ]\n);\n\n/**\n * Returns the shortcut names list for a given category name.\n *\n * @param {Object} state Global state.\n * @param {string} name  Category name.\n * @example\n *\n *```js\n * import { store as keyboardShortcutsStore } from '@wordpress/keyboard-shortcuts';\n * import { useSelect } from '@wordpress/data';\n *\n * const ExampleComponent = () => {\n *     const categoryShortcuts = useSelect(\n *         ( select ) =>\n *             select( keyboardShortcutsStore ).getCategoryShortcuts(\n *                 'block'\n *             ),\n *         []\n *     );\n *\n *     return (\n *         categoryShortcuts.length > 0 && (\n *             <ul>\n *                 { categoryShortcuts.map( ( categoryShortcut ) => (\n *                     <li key={ categoryShortcut }>{ categoryShortcut }</li>\n *                 ) ) }\n *             </ul>\n *         )\n *     );\n * };\n *```\n * @return {string[]} Shortcut names.\n */\nexport const getCategoryShortcuts = createSelector(\n\t( state, categoryName ) => {\n\t\treturn Object.entries( state )\n\t\t\t.filter( ( [ , shortcut ] ) => shortcut.category === categoryName )\n\t\t\t.map( ( [ name ] ) => name );\n\t},\n\t( state ) => [ state ]\n);\n","/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as actions from './actions';\nimport * as selectors from './selectors';\n\nconst STORE_NAME = 'core/keyboard-shortcuts';\n\n/**\n * Store definition for the keyboard shortcuts namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\treducer,\n\tactions,\n\tselectors,\n} );\n\nregister( store );\n","/**\n * Reducer returning the registered shortcuts\n *\n * @param {Object} state  Current state.\n * @param {Object} action Dispatched action.\n *\n * @return {Object} Updated state.\n */\nfunction reducer( state = {}, action ) {\n\tswitch ( action.type ) {\n\t\tcase 'REGISTER_SHORTCUT':\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t[ action.name ]: {\n\t\t\t\t\tcategory: action.category,\n\t\t\t\t\tkeyCombination: action.keyCombination,\n\t\t\t\t\taliases: action.aliases,\n\t\t\t\t\tdescription: action.description,\n\t\t\t\t},\n\t\t\t};\n\t\tcase 'UNREGISTER_SHORTCUT':\n\t\t\tconst { [ action.name ]: actionName, ...remainingState } = state;\n\t\t\treturn remainingState;\n\t}\n\n\treturn state;\n}\n\nexport default reducer;\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","/**\n * WordPress dependencies\n */\nimport { useSelect } from '@wordpress/data';\nimport { isKeyboardEvent } from '@wordpress/keycodes';\n\n/**\n * Internal dependencies\n */\nimport { store as keyboardShortcutsStore } from '../store';\n\n/**\n * Returns a function to check if a keyboard event matches a shortcut name.\n *\n * @return {Function} A function to check if a keyboard event matches a\n *                    predefined shortcut combination.\n */\nexport default function useShortcutEventMatch() {\n\tconst { getAllShortcutKeyCombinations } = useSelect(\n\t\tkeyboardShortcutsStore\n\t);\n\n\t/**\n\t * A function to check if a keyboard event matches a predefined shortcut\n\t * combination.\n\t *\n\t * @param {string}        name  Shortcut name.\n\t * @param {KeyboardEvent} event Event to check.\n\t *\n\t * @return {boolean} True if the event matches any shortcuts, false if not.\n\t */\n\tfunction isMatch( name, event ) {\n\t\treturn getAllShortcutKeyCombinations( name ).some(\n\t\t\t( { modifier, character } ) => {\n\t\t\t\treturn isKeyboardEvent[ modifier ]( event, character );\n\t\t\t}\n\t\t);\n\t}\n\n\treturn isMatch;\n}\n","/**\n * WordPress dependencies\n */\nimport { createContext } from '@wordpress/element';\n\nconst globalShortcuts = new Set();\nconst globalListener = ( event ) => {\n\tfor ( const keyboardShortcut of globalShortcuts ) {\n\t\tkeyboardShortcut( event );\n\t}\n};\n\nexport const context = createContext( {\n\tadd: ( shortcut ) => {\n\t\tif ( globalShortcuts.size === 0 ) {\n\t\t\tdocument.addEventListener( 'keydown', globalListener );\n\t\t}\n\t\tglobalShortcuts.add( shortcut );\n\t},\n\tdelete: ( shortcut ) => {\n\t\tglobalShortcuts.delete( shortcut );\n\t\tif ( globalShortcuts.size === 0 ) {\n\t\t\tdocument.removeEventListener( 'keydown', globalListener );\n\t\t}\n\t},\n} );\n","/**\n * WordPress dependencies\n */\nimport { useContext, useEffect, useRef } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport useShortcutEventMatch from './use-shortcut-event-match';\nimport { context } from '../context';\n\n/**\n * Attach a keyboard shortcut handler.\n *\n * @param {string}   name               Shortcut name.\n * @param {Function} callback           Shortcut callback.\n * @param {Object}   options            Shortcut options.\n * @param {boolean}  options.isDisabled Whether to disable to shortut.\n */\nexport default function useShortcut(\n\tname,\n\tcallback,\n\t{ isDisabled = false } = {}\n) {\n\tconst shortcuts = useContext( context );\n\tconst isMatch = useShortcutEventMatch();\n\tconst callbackRef = useRef();\n\n\tuseEffect( () => {\n\t\tcallbackRef.current = callback;\n\t}, [ callback ] );\n\n\tuseEffect( () => {\n\t\tif ( isDisabled ) {\n\t\t\treturn;\n\t\t}\n\n\t\tfunction _callback( event ) {\n\t\t\tif ( isMatch( name, event ) ) {\n\t\t\t\tcallbackRef.current( event );\n\t\t\t}\n\t\t}\n\n\t\tshortcuts.add( _callback );\n\t\treturn () => {\n\t\t\tshortcuts.delete( _callback );\n\t\t};\n\t}, [ name, isDisabled, shortcuts ] );\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"ReactJSXRuntime\"];","/**\n * WordPress dependencies\n */\nimport { useState } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport { context } from '../context';\n\nconst { Provider } = context;\n\n/**\n * Handles callbacks added to context by `useShortcut`.\n * Adding a provider allows to register contextual shortcuts\n * that are only active when a certain part of the UI is focused.\n *\n * @param {Object} props Props to pass to `div`.\n *\n * @return {Element} Component.\n */\nexport function ShortcutProvider( props ) {\n\tconst [ keyboardShortcuts ] = useState( () => new Set() );\n\n\tfunction onKeyDown( event ) {\n\t\tif ( props.onKeyDown ) {\n\t\t\tprops.onKeyDown( event );\n\t\t}\n\n\t\tfor ( const keyboardShortcut of keyboardShortcuts ) {\n\t\t\tkeyboardShortcut( event );\n\t\t}\n\t}\n\n\t/* eslint-disable jsx-a11y/no-static-element-interactions */\n\treturn (\n\t\t<Provider value={ keyboardShortcuts }>\n\t\t\t<div { ...props } onKeyDown={ onKeyDown } />\n\t\t</Provider>\n\t);\n\t/* eslint-enable jsx-a11y/no-static-element-interactions */\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","registerShortcut","name","category","description","keyCombination","aliases","type","unregisterShortcut","EMPTY_ARRAY","FORMATTING_METHODS","display","displayShortcut","raw","rawShortcut","ariaLabel","shortcutAriaLabel","getKeyCombinationRepresentation","shortcut","representation","modifier","character","getShortcutKeyCombination","state","getShortcutRepresentation","getShortcutDescription","getShortcutAliases","getAllShortcutKeyCombinations","createSelector","filter","Boolean","getAllShortcutRawKeyCombinations","map","combination","getCategoryShortcuts","categoryName","entries","store","createReduxStore","reducer","action","actionName","remainingState","actions","selectors","register","useShortcutEventMatch","useSelect","keyboardShortcutsStore","event","some","isKeyboardEvent","globalShortcuts","Set","globalListener","keyboardShortcut","context","createContext","add","size","document","addEventListener","delete","removeEventListener","useShortcut","callback","isDisabled","shortcuts","useContext","isMatch","callbackRef","useRef","useEffect","current","_callback","Provider","ShortcutProvider","props","keyboardShortcuts","useState","_jsx","children","onKeyDown"],"sourceRoot":""}