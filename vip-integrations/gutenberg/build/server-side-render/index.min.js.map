{"version":3,"file":"./build/server-side-render/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/compat get default export","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/external window [\"wp\",\"element\"]","webpack://wp/external window [\"wp\",\"i18n\"]","webpack://wp/external window [\"wp\",\"components\"]","webpack://wp/external window [\"wp\",\"data\"]","webpack://wp/external window [\"wp\",\"compose\"]","webpack://wp/external window [\"wp\",\"apiFetch\"]","webpack://wp/external window [\"wp\",\"url\"]","webpack://wp/external window [\"wp\",\"blocks\"]","../../packages/server-side-render/src/hook.js","webpack://wp/external window \"ReactJSXRuntime\"","../../packages/server-side-render/src/server-side-render.js","../../packages/server-side-render/src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"compose\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"apiFetch\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"url\"];","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","/**\n * WordPress dependencies\n */\nimport { debounce } from '@wordpress/compose';\nimport { useEffect, useState, useRef } from '@wordpress/element';\nimport apiFetch from '@wordpress/api-fetch';\nimport { addQueryArgs } from '@wordpress/url';\nimport { __experimentalSanitizeBlockAttributes } from '@wordpress/blocks';\n\nexport function rendererPath( block, attributes = null, urlQueryArgs = {} ) {\n\treturn addQueryArgs( `/wp/v2/block-renderer/${ block }`, {\n\t\tcontext: 'edit',\n\t\t...( null !== attributes ? { attributes } : {} ),\n\t\t...urlQueryArgs,\n\t} );\n}\n\nexport function removeBlockSupportAttributes( attributes ) {\n\tconst {\n\t\tbackgroundColor,\n\t\tborderColor,\n\t\tfontFamily,\n\t\tfontSize,\n\t\tgradient,\n\t\ttextColor,\n\t\tclassName,\n\t\t...restAttributes\n\t} = attributes;\n\n\tconst {\n\t\tborder,\n\t\tcolor,\n\t\telements,\n\t\tshadow,\n\t\tspacing,\n\t\ttypography,\n\t\t...restStyles\n\t} = attributes?.style || {};\n\n\treturn {\n\t\t...restAttributes,\n\t\tstyle: restStyles,\n\t};\n}\n\n/**\n * @typedef {Object} ServerSideRenderResponse\n * @property {string} status    - The current request status: 'idle', 'loading', 'success', or 'error'.\n * @property {string} [content] - The rendered block content (available when status is 'success').\n * @property {string} [error]   - The error message (available when status is 'error').\n */\n\n/**\n * A hook for server-side rendering a preview of dynamic blocks to display in the editor.\n *\n * Handles fetching server-rendered previews for blocks, managing loading states,\n * and automatically debouncing requests to prevent excessive API calls. It supports both\n * GET and POST requests, with POST requests used for larger attribute payloads.\n *\n * @example\n * Basic usage:\n *\n * ```jsx\n * import { RawHTML } from '@wordpress/element';\n * import { useServerSideRender } from '@wordpress/server-side-render';\n *\n * function MyServerSideRender( { attributes, block } ) {\n *   const { content, status, error } = useServerSideRender( {\n *     attributes,\n *     block,\n *   } );\n *\n *   if ( status === 'loading' ) {\n *     return <div>Loading...</div>;\n *   }\n *\n *   if ( status === 'error' ) {\n *     return <div>Error: { error }</div>;\n *   }\n *\n *   return <RawHTML>{ content }</RawHTML>;\n * }\n * ```\n *\n * @param {Object}  args                                    The hook configuration object.\n * @param {Object}  args.attributes                         The block attributes to be sent to the server for rendering.\n * @param {string}  args.block                              The identifier of the block to be serverside rendered. Example: 'core/archives'.\n * @param {boolean} [args.skipBlockSupportAttributes=false] Whether to remove block support attributes before sending.\n * @param {string}  [args.httpMethod='GET']                 The HTTP method to use ('GET' or 'POST'). Default is 'GET'.\n * @param {Object}  [args.urlQueryArgs]                     Additional query arguments to append to the request URL.\n *\n * @return {ServerSideRenderResponse} The server-side render response object.\n */\nexport function useServerSideRender( args ) {\n\tconst [ response, setResponse ] = useState( { status: 'idle' } );\n\tconst shouldDebounceRef = useRef( false );\n\n\tconst {\n\t\tattributes,\n\t\tblock,\n\t\tskipBlockSupportAttributes = false,\n\t\thttpMethod = 'GET',\n\t\turlQueryArgs,\n\t} = args;\n\n\tlet sanitizedAttributes =\n\t\tattributes &&\n\t\t__experimentalSanitizeBlockAttributes( block, attributes );\n\n\tif ( skipBlockSupportAttributes ) {\n\t\tsanitizedAttributes =\n\t\t\tremoveBlockSupportAttributes( sanitizedAttributes );\n\t}\n\n\t// If httpMethod is 'POST', send the attributes in the request body instead of the URL.\n\t// This allows sending a larger attributes object than in a GET request, where the attributes are in the URL.\n\tconst isPostRequest = 'POST' === httpMethod;\n\tconst urlAttributes = isPostRequest ? null : sanitizedAttributes;\n\tconst path = rendererPath( block, urlAttributes, urlQueryArgs );\n\tconst body = isPostRequest\n\t\t? JSON.stringify( { attributes: sanitizedAttributes ?? null } )\n\t\t: undefined;\n\n\tuseEffect( () => {\n\t\tconst controller = new AbortController();\n\t\tconst debouncedFetch = debounce(\n\t\t\tfunction () {\n\t\t\t\t{\n\t\t\t\t\tsetResponse( { status: 'loading' } );\n\n\t\t\t\t\tapiFetch( {\n\t\t\t\t\t\tpath,\n\t\t\t\t\t\tmethod: isPostRequest ? 'POST' : 'GET',\n\t\t\t\t\t\tbody,\n\t\t\t\t\t\theaders: isPostRequest\n\t\t\t\t\t\t\t? {\n\t\t\t\t\t\t\t\t\t'Content-Type': 'application/json',\n\t\t\t\t\t\t\t  }\n\t\t\t\t\t\t\t: {},\n\t\t\t\t\t\tsignal: controller.signal,\n\t\t\t\t\t} )\n\t\t\t\t\t\t.then( ( res ) => {\n\t\t\t\t\t\t\tsetResponse( {\n\t\t\t\t\t\t\t\tstatus: 'success',\n\t\t\t\t\t\t\t\tcontent: res ? res.rendered : '',\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.catch( ( error ) => {\n\t\t\t\t\t\t\t// The request was aborted, do not update the response.\n\t\t\t\t\t\t\tif ( error.name === 'AbortError' ) {\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tsetResponse( {\n\t\t\t\t\t\t\t\tstatus: 'error',\n\t\t\t\t\t\t\t\terror: error.message,\n\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t} )\n\t\t\t\t\t\t.finally( () => {\n\t\t\t\t\t\t\t// Debounce requests after first fetch.\n\t\t\t\t\t\t\tshouldDebounceRef.current = true;\n\t\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t},\n\t\t\tshouldDebounceRef.current ? 500 : 0\n\t\t);\n\n\t\tdebouncedFetch();\n\n\t\treturn () => {\n\t\t\tcontroller.abort();\n\t\t\tdebouncedFetch.cancel();\n\t\t};\n\t}, [ path, isPostRequest, body ] );\n\n\treturn response;\n}\n","const __WEBPACK_NAMESPACE_OBJECT__ = window[\"ReactJSXRuntime\"];","/**\n * WordPress dependencies\n */\nimport {\n\tRawHTML,\n\tuseEffect,\n\tuseState,\n\tuseRef,\n\tuseMemo,\n} from '@wordpress/element';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { Placeholder, Spinner } from '@wordpress/components';\nimport { useSelect } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport { useServerSideRender } from './hook';\n\nconst EMPTY_OBJECT = {};\n\nfunction DefaultEmptyResponsePlaceholder( { className } ) {\n\treturn (\n\t\t<Placeholder className={ className }>\n\t\t\t{ __( 'Block rendered as empty.' ) }\n\t\t</Placeholder>\n\t);\n}\n\nfunction DefaultErrorResponsePlaceholder( { message, className } ) {\n\tconst errorMessage = sprintf(\n\t\t// translators: %s: error message describing the problem\n\t\t__( 'Error loading block: %s' ),\n\t\tmessage\n\t);\n\treturn <Placeholder className={ className }>{ errorMessage }</Placeholder>;\n}\n\nfunction DefaultLoadingResponsePlaceholder( { children } ) {\n\tconst [ showLoader, setShowLoader ] = useState( false );\n\n\tuseEffect( () => {\n\t\t// Schedule showing the Spinner after 1 second.\n\t\tconst timeout = setTimeout( () => {\n\t\t\tsetShowLoader( true );\n\t\t}, 1000 );\n\t\treturn () => clearTimeout( timeout );\n\t}, [] );\n\n\treturn (\n\t\t<div style={ { position: 'relative' } }>\n\t\t\t{ showLoader && (\n\t\t\t\t<div\n\t\t\t\t\tstyle={ {\n\t\t\t\t\t\tposition: 'absolute',\n\t\t\t\t\t\ttop: '50%',\n\t\t\t\t\t\tleft: '50%',\n\t\t\t\t\t\tmarginTop: '-9px',\n\t\t\t\t\t\tmarginLeft: '-9px',\n\t\t\t\t\t} }\n\t\t\t\t>\n\t\t\t\t\t<Spinner />\n\t\t\t\t</div>\n\t\t\t) }\n\t\t\t<div style={ { opacity: showLoader ? '0.3' : 1 } }>\n\t\t\t\t{ children }\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport function ServerSideRender( props ) {\n\tconst prevContentRef = useRef( '' );\n\tconst {\n\t\tclassName,\n\t\tEmptyResponsePlaceholder = DefaultEmptyResponsePlaceholder,\n\t\tErrorResponsePlaceholder = DefaultErrorResponsePlaceholder,\n\t\tLoadingResponsePlaceholder = DefaultLoadingResponsePlaceholder,\n\t\t...restProps\n\t} = props;\n\n\tconst { content, status, error } = useServerSideRender( restProps );\n\n\t// Store the previous successful HTML response to show while loading.\n\tuseEffect( () => {\n\t\tif ( content ) {\n\t\t\tprevContentRef.current = content;\n\t\t}\n\t}, [ content ] );\n\n\tif ( status === 'loading' ) {\n\t\treturn (\n\t\t\t<LoadingResponsePlaceholder { ...props }>\n\t\t\t\t{ !! prevContentRef.current && (\n\t\t\t\t\t<RawHTML className={ className }>\n\t\t\t\t\t\t{ prevContentRef.current }\n\t\t\t\t\t</RawHTML>\n\t\t\t\t) }\n\t\t\t</LoadingResponsePlaceholder>\n\t\t);\n\t}\n\n\tif ( status === 'success' && ! content ) {\n\t\treturn <EmptyResponsePlaceholder { ...props } />;\n\t}\n\n\tif ( status === 'error' ) {\n\t\treturn <ErrorResponsePlaceholder message={ error } { ...props } />;\n\t}\n\n\treturn <RawHTML className={ className }>{ content }</RawHTML>;\n}\n\n/**\n * A component that renders server-side content for blocks.\n *\n * Note: URL query will include the current post ID when applicable.\n * This is useful for blocks that depend on the context of the current post for rendering.\n *\n * @example\n * ```jsx\n * import { ServerSideRender } from '@wordpress/server-side-render';\n * // Legacy import for WordPress 6.8 and earlier\n * // import { default as ServerSideRender } from '@wordpress/server-side-render';\n *\n * function Example() {\n *   return (\n *     <ServerSideRender\n *       block=\"core/archives\"\n *       attributes={ { showPostCounts: true } }\n *       urlQueryArgs={ { customArg: 'value' } }\n *       className=\"custom-class\"\n *     />\n *   );\n * }\n * ```\n *\n * @param {Object}   props                                    Component props.\n * @param {string}   props.block                              The identifier of the block to be serverside rendered.\n * @param {Object}   props.attributes                         The block attributes to be sent to the server for rendering.\n * @param {string}   [props.className]                        Additional classes to apply to the wrapper element.\n * @param {string}   [props.httpMethod='GET']                 The HTTP method to use ('GET' or 'POST'). Default is 'GET'\n * @param {Object}   [props.urlQueryArgs]                     Additional query arguments to append to the request URL.\n * @param {boolean}  [props.skipBlockSupportAttributes=false] Whether to remove block support attributes before sending.\n * @param {Function} [props.EmptyResponsePlaceholder]         Component rendered when the API response is empty.\n * @param {Function} [props.ErrorResponsePlaceholder]         Component rendered when the API response is an error.\n * @param {Function} [props.LoadingResponsePlaceholder]       Component rendered while the API request is loading.\n *\n * @return {JSX.Element} The rendered server-side content.\n */\nexport function ServerSideRenderWithPostId( {\n\turlQueryArgs = EMPTY_OBJECT,\n\t...props\n} ) {\n\tconst currentPostId = useSelect( ( select ) => {\n\t\t// FIXME: @wordpress/server-side-render should not depend on @wordpress/editor.\n\t\t// It is used by blocks that can be loaded into a *non-post* block editor.\n\t\t// eslint-disable-next-line @wordpress/data-no-store-string-literals\n\t\tconst postId = select( 'core/editor' )?.getCurrentPostId();\n\n\t\t// For templates and template parts we use a custom ID format.\n\t\t// Since they aren't real posts, we don't want to use their ID\n\t\t// for server-side rendering. Since they use a string based ID,\n\t\t// we can assume real post IDs are numbers.\n\t\treturn postId && typeof postId === 'number' ? postId : null;\n\t}, [] );\n\n\tconst newUrlQueryArgs = useMemo( () => {\n\t\tif ( ! currentPostId ) {\n\t\t\treturn urlQueryArgs;\n\t\t}\n\t\treturn {\n\t\t\tpost_id: currentPostId,\n\t\t\t...urlQueryArgs,\n\t\t};\n\t}, [ currentPostId, urlQueryArgs ] );\n\n\treturn <ServerSideRender urlQueryArgs={ newUrlQueryArgs } { ...props } />;\n}\n","/**\n * Internal dependencies\n */\nimport { ServerSideRenderWithPostId } from './server-side-render';\nimport { useServerSideRender } from './hook';\n\n/**\n * A compatibility layer for the `ServerSideRender` component when used with `wp` global namespace.\n *\n * @deprecated Use `ServerSideRender` non-default export instead.\n *\n * @example\n * ```js\n * import ServerSideRender from '@wordpress/server-side-render';\n * ```\n */\nconst ServerSideRenderCompat = ServerSideRenderWithPostId;\nServerSideRenderCompat.ServerSideRender = ServerSideRenderWithPostId;\nServerSideRenderCompat.useServerSideRender = useServerSideRender;\n\nexport { ServerSideRenderWithPostId as ServerSideRender };\nexport { useServerSideRender };\nexport default ServerSideRenderCompat;\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","window","useServerSideRender","args","_sanitizedAttributes","response","setResponse","useState","status","shouldDebounceRef","useRef","attributes","block","skipBlockSupportAttributes","httpMethod","urlQueryArgs","sanitizedAttributes","__experimentalSanitizeBlockAttributes","backgroundColor","borderColor","fontFamily","fontSize","gradient","textColor","className","restAttributes","border","color","elements","shadow","spacing","typography","restStyles","style","removeBlockSupportAttributes","isPostRequest","path","addQueryArgs","context","rendererPath","body","JSON","stringify","undefined","useEffect","controller","AbortController","debouncedFetch","debounce","apiFetch","method","headers","signal","then","res","content","rendered","catch","error","name","message","finally","current","abort","cancel","EMPTY_OBJECT","DefaultEmptyResponsePlaceholder","_jsx","Placeholder","children","__","DefaultErrorResponsePlaceholder","errorMessage","sprintf","DefaultLoadingResponsePlaceholder","showLoader","setShowLoader","timeout","setTimeout","clearTimeout","_jsxs","position","top","left","marginTop","marginLeft","Spinner","opacity","ServerSideRender","props","prevContentRef","EmptyResponsePlaceholder","ErrorResponsePlaceholder","LoadingResponsePlaceholder","restProps","RawHTML","ServerSideRenderWithPostId","currentPostId","useSelect","select","postId","getCurrentPostId","newUrlQueryArgs","useMemo","post_id","ServerSideRenderCompat"],"sourceRoot":""}