import { useEffect } from '@wordpress/element';
import ServerSideRender from '@wordpress/server-side-render';

import metadata from './block.json';
import { initMaps } from './view';

/* global document */

/**
 * The map elements are rendered differently in the block editor vs the WordPress
 * frontend. This hook handles the differences.
 */
function useMapInit() {
	useEffect( () => {
		// In the block editor, the document can be iframed.
		const parentDocument =
			document.querySelector( 'iframe[name="editor-canvas"]' )?.contentDocument ?? document;

		// Use an interval to make sure we get elements that might arrive "late" due
		// to client-side rendering or because they are rendered in the block editor.
		//
		// Using `ServerSideRender` allows us to rely on the markup generated by
		// `render.php`, which is good. But we don't have a way to know when the
		// render is finished, so we need to poll.
		const timer = setInterval( () => {
			const mapElement = parentDocument.querySelector(
				'.wp-block-example-leaflet-map[data-map-coordinates]'
			);

			if ( mapElement ) {
				initMaps( [ mapElement ] );
				clearInterval( timer );
			}
		}, 100 );

		return () => clearInterval( timer );
	}, [] );
}

export function Edit() {
	useMapInit();

	// ServerSideRender allows us to reuse the markup generated by `render.php`
	// instead of duplicating the rendering logic in JavaScript.
	return <ServerSideRender block={ metadata.name } />;
}
