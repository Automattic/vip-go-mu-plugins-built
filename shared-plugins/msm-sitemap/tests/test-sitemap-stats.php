<?php
/**
 * WP_Test_Sitemap_Stats
 *
 * @package Metro_Sitemap/unit_tests
 */

require_once( 'msm-sitemap-test.php' );

/**
 * Unit Tests to validate stats are propelry generated by Metro_Sitemap
 *
 * @author michaelblouin
 * @author Matthew Denton (mdbitz)
 */
class WP_Test_Sitemap_Stats extends WP_UnitTestCase {

	/**
	 * Humber of Posts to Create (1 per year)
	 *
	 * @var Integer
	 */
	private $num_years_data = 3;

	/**
	 * Base Test Class Instance
	 *
	 * @var MSM_SIteMap_Test
	 */
	private $test_base;

	/**
	 * Generate posts and build initial sitemaps
	 */
	function setup() {
		_delete_all_posts();

		$this->test_base = new MSM_SiteMap_Test();

		// Add a post for each day in the last x years.
		$dates = array();
		$date = time();
		for ( $i = 0; $i < $this->num_years_data; $i++ ) {
			// Add a post for x years ago.
			$dates[] = date( 'Y', $date ) . '-' . date( 'm', $date ) . '-' . date( 'd', $date ) . ' 00:00:00';
			$date = strtotime( '-1 year', $date );
		}

		$this->test_base->create_dummy_posts( $dates );

		$this->assertCount( $this->num_years_data, $this->test_base->posts );
		$this->test_base->build_sitemaps();
	}

	/**
	 * Remove created posts, Sitemaps and options
	 */
	function teardown() {
		$this->test_base->posts = array();
		$sitemaps = get_posts( array(
			'post_type' => Metro_Sitemap::SITEMAP_CPT,
			'fields' => 'ids',
			'posts_per_page' => -1,
		) );
		update_option( 'msm_sitemap_indexed_url_count' , 0 );
		array_map( 'wp_delete_post', array_merge( $this->test_base->posts_created, $sitemaps ) );
	}

	/**
	 * Verify that indexed URL count is calculated correctly
	 */
	function test_site_stats_creation() {
		// Check that we've indexed the proper total number of URLs.
		$this->assertEquals( $this->num_years_data, Metro_Sitemap::get_total_indexed_url_count() );

		// Check specific stats.
		$this->assertTrue( $this->test_base->check_stats_for_created_posts() );
	}

	/**
	 * Checks that site stats are correct after inserting a new post on a day
	 * that already has a sitemap.
	 */
	function test_site_stats_for_new_post() {
		$today_str = date( 'Y-m-d' );

		// Insert a new post for today.
		$this->test_base->create_dummy_posts( array( $today_str . ' 00:00:00' ) );

		// Build sitemaps.
		$this->test_base->build_sitemaps();

		// Check stats.
		$this->assertEquals( $this->num_years_data + 1, Metro_Sitemap::get_total_indexed_url_count() );

		// Check specific stats.
		$this->assertTrue( $this->test_base->check_stats_for_created_posts() );
	}

	/**
	 * Validate that Indexed URL Count is updated properly as posts are removed
	 */
	function test_site_stats_for_deleted_post() {

		// Delete all posts (going backwards in time).
		$post_count = count( $this->test_base->posts );
		while ( $post_count ) {
			$last_post = array_pop( $this->test_base->posts );
			$post = wp_delete_post( $last_post['ID'], true );
			$post_count -= 1;

			$this->test_base->update_sitemap_by_post( $post );
			$this->assertEquals( $post_count, Metro_Sitemap::get_total_indexed_url_count() );
			$this->assertTrue( $this->test_base->check_stats_for_created_posts() );
		}

		$this->assertEquals( 0, Metro_Sitemap::count_sitemaps() );
		$this->assertEquals( 0, Metro_Sitemap::get_total_indexed_url_count() );
	}
}

